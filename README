# -*- org -*-
* Todo
** bugs, misc
*** TODO login/new-account failures don't have standard form behavior; wrong password has no feedback
*** TODO std.fmt.date.ymdhm should omit the 'hm' if the hour is exactly midnight.
*** TODO 500/404 page handling
Mostly on public/production site.
*** DONE adding hop without boil time -> 500?
    CLOSED: [2008-08-31 Sun 18:32]
*** DONE /user/{user}/brew/{id}?type={type} doesn't work.
*** DONE with validation error on step addition, the form is correctly populated, but collapsed
** shitty things
*** "next_possible_step[s]" logic, including future-dated steps
**** semi-duplicated between model and (view) brew()
**** See [[*Future%20Steps][future steps]]
*** recipe_new()
*** brew()
**** way too deep/nested
*** toggled <div> py:attrs style form mumble
** tests
*** front-to-back-script
- create new user, fail
- correct mistake, success
- login, fail
- login success
- create recipe
- create brew from recipe
- update brew steps
  - mostly in order
  - go back and correct some mistakes
- setup future brew
- advance clock forward
- check "future" steps
- advance clock forward
- transition future step to current step
- add steps "in real time"
- update old brew
  [- the idea here is a combined brew-day where the carboy for brew A is
     being vacated for the current brew B]
- advance clock forward
- update brew
*** recipe editing
**** from url
**** add grain: happy, sad
***** sad
- absurd units
  - missing values
  - wrong values
- OOB units
**** add hop: happy, sad
**** add yeast: happy, sad
**** add adjunct: happy, sad
*** brew editing
**** schedule steps, test 'next step' computations
**** future steps:
- check dashboard reflects changes appropriately
- check future steps
  - changing future date
  - changing future date -> "now"
  - changing future date -> "a few seconds ago"
  - changing future date -> way in the past
  - "realize" a future dated step with other future dated steps
    - follow-on effect on "next step" logic
**** changes to steps, impact
*** brew impacts
**** shopping list
** major
*** calendaring
**** encourage future steps visually … how?
***** when adding a 'pitch' step, prompt to add future steps for 'ferm1' and 'ferm2'
***** when adding 'starter', prompt for 'strike-water', 'ferm1', 'ferm2', &c.…
**** if a "future" action gets updated in time, what happens to other future actions after it?
***** nothing
***** they're moved forward in time by the same delta-T they had before the update (nifty, but maybe wrong.)
****** then make it some policy of the type of future step?  Ferm vs. keg vs. …?
***** make them all immediately after the new step.
**** "standard" ferm schedules?
***** 1 wk primary, 2 wk secondary
***** style-based?
**** DONE next step types += first future step for update
**** DONE add step form takes into account first future step
**** DONE add "future" sub-body to table
***** visually/functionally distinct how?
*** shopping list
**** TODO better shopping list
***** TODO [#N] collapse ingredients (hops esp.) in same brew
***** TODO [#N] sum ingredient amounts
***** TODO [#S] better ordering
***** table display?
***** TODO [#W] probably actually want to model "need to buy" or "don't need to buy" states.
**** http://beeradvocate.com/forum/read/1102362#1102497
*** computed values
**** efficiency
***** TODO [#S] "?mumble?" vs. "brewhouse" efficiency
***** DONE [#N] need: grains + gravity readings + volume reading
***** TODO [#N] efficiency tracker
**** A/V
***** TODO [#S] estimated: fn(grains, efficiency, yeast.attenuation)
***** DONE [#N] actual: FG - OG
**** OG
***** TODO [#S] estimated: fn(grains, efficiency, yeast.attenuation)
***** actual: gravity at 'pitch'
**** FG
***** TODO [#S] estimated: fn(grains, est_OG, yeast.attenuation)
***** actual: latest post-'pitch' gravity reading
**** IBU
***** TODO [#W] estimated: fn(hop schedule)
***** actual: none
**** SRM
***** TODO [#W] estimated: fn(grains)
***** TODO [#W] actual: none (manual entry)
**** timing
***** brew day
***** fermentation
**** mash chart/schedule
***** planned
***** actual
*** game/achievements
**** meta
***** user must be able to turn this off, but defaults to on
***** user must be able to decline [?]
****** "first keg", but we've been kegging for a while, and are working backwards in entry.
***** future brews should show user what achievements will be earned.
**** achievements
***** firsts/technique
****** "First Brew!  Welcome! :)"
****** "First Brew in ${style}"
****** First {Ale,Lager,Common,Brett,Cider,Mead,Bragot}
****** First {1.060,70,80,90,100,} OG brew
****** first {single-infusion,decoction} mash
****** mash-out with your bad self!
****** first {cont.sparge, batch sparge, oat sparge, >25% wheat sparge}
****** first dry-hopping
****** first fruit
****** first smoke
****** first oak/wood
***** journeyman
****** x{50|100} gallons brewed
****** {10,25,50,100,150,…} brews complete
****** Brewing for {1,2,3,…} years.
***** perfection/technique
****** {75,80,85,90,95,>95} efficiency
****** competition awards
****** BJCP scoring
***** height
****** {6,7,9,10,11,12,13,15} abv
****** "Hop Bomb!": >100 IBU brewed
****** 60, 90, 120 minute boil
***** random
****** "Session ": 3-4% abv
****** "most novel ingredient"
****** selection of weird ingredients
******* honey
******* grains of paradise
******* cinnamon
****** "Weird!"
******* ale grain profile, lager yeast
******* ? what else...?
***** series
****** 5 >{70,80,90}% efficiency in a row.
****** >{1,2,5} gal/week brewed for this year.
***** site-wide
****** longest {{primary,second} fermentation,conditioning}
****** these need to be "rescinded".
*** form validation
**** visual (see Yahoo patterns)
**** client-side validation
**** DONE actual submission logic
*** visual design
**** logo/identity
***** typeface-based
***** beer mug ring/stain
***** graph paper = journal
**** how wide are tables normally?  90%?  80%?
**** steal "Actions" table from <https://launchpad.net/bzr-rebase>
***** recipe actions?
***** brew actions?
**** brew next steps list: only show most likely, hide rest behind "(more…)"
*** recipe browse/search
**** browsing
**** searching
***** structured, by ingredient/style/&c.
*** user addition of recipe components
*** alerts
**** "keg now!"
**** "rack this week?"
*** comments
**** OpenID support
*** widget-style embedding
**** brew overview
**** upcoming brews
*** recipe input features
**** DONE regular browser
**** clone from other URL
***** use the following style of the Google Reader "note this URL" bookmarklet for on-the-web recipe induction:

       javascript:
       var b=document.body;
       var GR________bookmarklet_domain='http://www.google.com';
       if(b&&!document.xmlVersion){
       void(z=document.createElement('script'));
       void(z.src='http://www.google.com/reader/ui/link-bookmarklet.js');
       void(b.appendChild(z));
       }
       else{}

**** star from other URL
**** parse block of text
*** keyboard navigation
**** j/k should navigate between displayed table rows, jumping between tables.
**** 'g {location}' paradigm?
**** '?' overlay
*** printable journal pages
**** long-term storage/archiving
*** import/export
*** add 'equipment'/'rig'
** minor
*** be able to (re-)associate a recipe with a Brew
*** focus improvements
**** profile form after new user creation
**** /user/{user}
***** next action
**** /recipe/{id}/{text}
***** DONE top actions
***** DONE edit details -> :input:first
***** DONE add -> first form elt
***** GET after POST of {grain, hop, …} -> [add] button on same form.
*** identity links in profile to other fora
**** beeradvocate
**** tastybrew
**** ?others?
*** use django `get_absolute_url`, `permalink` methods.
*** /recipe/{id}
**** show all brew instances of recipe
***** by: authoring user, viewing user, all users
**** DONE add "clone", "brew" ui options
*** starring recipes
**** make AJAX-y
*** recipe editing
**** pre-select units fields
***** same as the last-used units in the item-class
***** prefs
*** user profile
**** other web url
**** preferences
***** default recipe type (extract, partial-mash, all-grain)
***** default units (english/metric)
***** favorite style
*** step addition
**** de-emphasise unrelated entry fields in any given step-type.
**** better form layout, anyways
*** google crawling
**** anything private?
**** robots.txt
*** model cleanups
**** Brew
***** add brew name?
***** must Brews have recipes?
***** Notes
****** add differentiated, timestampped, author'd notes
******* this approaches Comments, where Brew.brewer = Comment.author is a bit special.
**** Hops
***** type: bittering? flavor? aroma?
***** class: german, american, british
***** notes: "floral, citrusy, &c."
*** signup
**** username character restrictions
**** email verification
*** user-friendly field values ("gl" -> "gallon(s)")
*** add data
**** adjuncts
**** more yeasts
***** generic yeasts
***** dry yeasts (Safale, Windsor, &c.)
***** Wyeast: wine, distiller, cider, mead, sake, VSS archives
***** White Labs
*** paginated views
**** historical brews
**** all authored recipes
*** better auth
**** OpenID
**** verification
**** forgot password
**** forgot username
*** system logging
**** per request/timing
**** general system
**** auth-related
*** refactor rendering
**** starred-recipe table on /user/jsled/ and /user/jsled/recipe/
*** auth
**** general 'edit-controls-for-authorized-editor'
***** /user/{user}/ -> starred, recipe actions, controls
**** generic 'auth-user-must-match-object-owner' during POST handling
**** superuser support all around
*** user interface
**** abbrev -> full label in views
**** auto-complete text fields for style, grain, hops...
**** step addition
***** if the brew knows the mash grains, then it can compute strike and sparge water volumes, absorption, &c.
*** TwoLevelSelectWidget
**** cleanup, review
**** use for
***** TODO [#S] hops
****** TODO [#S] extend Hops model for regional, functional groupings
***** TODO [#N] adjuncts
*** step type constraint
**** DONE break out step options based on current state of brew instance
**** better step_type modeling dervied to options,constraints,labels,&c.
*** deletion
**** recipe
**** brew
* Concepts
** Future Steps

Future steps are used a couple of ways:
- to schedule out a whole brew session, with rough times, &c.
- to schedule transition points in a fermentation session
  - to establish calendar/task/reminder entries


When operating with a mix of future and realized steps; let's assume a
time-stamped mix of future (f_) and real (r_) events:

   [f_0, f_5, f_10, f_15]      | 4 future steps
-> [r_1, f_5, f_10, f_15]      | realize the first step, about the right time
-> [r_1, r_12, f_10, f_15]     | realize the second step *after* the future 3rd step


At this point, it seems that next_step is f_10, but with its time adjusted to
be equal to the value of r_12.


Another option is that the second transition "pushes" the timestamps of the
other future steps out by the same amount; thus, that last transition would
instead effect:

-> [r_1, r_12, f_17, f_22]

This is most useful for a brew session which has its events scheduled at
fixed offsets from each other, where a slip should "cascade" to other
events.  E.g., if the mash starts 25 minutes late, it still takes an hour,
and all subsequent steps (the boil, hop additions, &c.) should get
pushed out 25 minutes.  However, on a different scale, there is no need for a
cascade.  If the mash/pitch happens 1 or 5 or even 12 hours later, I'm
probably still racking next Saturday, and kegging in 3 weeks.


What's the threshold?

- change steps on the same (literal) day
- change steps within the next N (=6?) hour window
- change steps until the inter-step distance is N (=6?) hours
- change steps while the magnitude of change is a fraction of the inter-step delta.

I like the the inter-step distance test, maybe with a threshold of 12 hours
or so.

Note that "push" and "pull" are the same, above.  We should probably say
"adjust" instead.

----------

Now, what about intermediate non-Future steps that get inserted, but are part
of the Step-relation depgraph?  For instance, we create future steps for
'strike' and 'boil', but then actually record realized steps for the
intervening 'mash' and 'sparge' steps?

If the immediately next Future step is in the (multi-level) tree of future
steps possible from the newly-added Step, we're in one of two sitautions:

- the new step is intentionally "splitting" the time the steps were
  allocating.
- the new step represents a delay, and the future steps should be pushed out;
  but it's not clear by how much, except if we take some "standard" schedules
  into account, where possible.

I don't think it's possible to handle this without being pretty – perhaps too
– clever.  So, don't.


Now, if the new Realized step is (topologically and temporally) *after* the
first Future scheduled step, then we have a problem.  E.g., we have:

    [r_strike, f_mash, r_boil(new)]

We have a few options:

- ignore the "missed" Future step.  Don't consider it as a valid next step.
- Error/force the realization of the missed step.
- silently realize the missed step with its existing timestamp
  - maybe only iff its timestamp "makes sense" given the previous and
    currently-realized steps?

Next Steps
----------

At any given point, the most likely Next Steps follow from the latest
realized step.  If those steps coincide with any future steps, then the next
steps *are* the future steps (for update), otherwise they are steps for
creation.

** Medals/Achievements
*** medals are awarded based on achieving a condition
*** we should be tolerant of data entered in non-temporal order
*** "standing rules"

it may make sense to have some sort of trigger-based rule system to determine
when/what data needs to be loaded in order to determine if a particular medal
is now allowed.

* Colors

Base green: rgb(34, 140, 34) (#228C22)

<http://wellstyled.com/tools/colorscheme2/index-en.html#>, triad:

green: #228C22
dark: #186218
light: #CFFFCF
bright: #9EFF9E

purple: #8C2272
dark: #62184F
light: #FFCFF3
bright: #FF9EE7

brown: #8C4C22
dark: #623518
light: #FFE2CF
bright: #FFC59E


<http://www.easyrgb.com/index.php?X=HARM#Result>:
nice blue/purple/grey: #6977B0
nice soft green: #75B368

* Weirdness
** when journaling after racking to secondary, is it entered as primary-ferm or secondary-ferm?

Maybe Steps should strictly be "transitions" or "activtives", not just states
of being.

* Resources
** http://www.beersmith.com/GrainList.htm
* git notes

git fetch
git rebase remotes/origin/master

* Thanks, Google Cache

This is for the … weizen?

date 	step 	volume 	temp 	gravity (corrected) 	notes
2008-06-13 00:00 	make starter 	800 ml 			
2008-06-21 12:50 	dough-in 	5 gl 	151 f 		overshot mash temp, needed more water to cool.
2008-06-21 13:20 	mash 				
2008-06-21 13:50 	mash 		151 f 		
2008-06-21 13:51 	1st runnings, start 			1.064 	
2008-06-21 14:05 	1st runnings, end 			1.054 	
2008-06-21 14:20 	2nd runnings, start 			1.031 	
2008-06-21 16:15 	pitch 	5 gl 		1.037 	
2008-06-29 13:30 	kegged 			1.009 	
2008-06-21 12:35 	strike water 	4.5 gl 	170 f 		
